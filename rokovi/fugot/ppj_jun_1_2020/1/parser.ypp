%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <cmath>

extern int yylex();

void yyerror(std::string s) {
	std::cerr << "Greska: " << s << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, int> promenljive;
std::map<std::string, std::vector<int> *> liste;

#define MINUT 60
#define STEPEN (60 * MINUT)
#define KRUG (360 * STEPEN)

void ispis_ugao(int sek) {
int stepeni = sek / STEPEN;
	int minuti = (sek - stepeni * STEPEN) / MINUT;
	int sekunde = sek - stepeni * STEPEN - minuti * MINUT;
	std::cout << stepeni % 360 << "." << minuti << "." << sekunde;
}

%}

%union {
	std::string *ime;
	int vrednost;
	std::vector<int> *lista;
}

%token LT_T GT_T LTE_T GTE_T EQ_T NEQ_T MAX_T MIN_T PROSEK_T RAD_T
%token<ime> ID_T IDL_T
%token<vrednost> BROJ_T
%type<vrednost> izraz
%type<lista> lista lista_el

%left '+' '-'
%left '*' '/'

%start program

%%

program: program naredba '\n'
	| naredba '\n'
	;
naredba: ID_T '=' izraz				{
										promenljive[*$1] = $3;
										delete $1;
									}
	| izraz							{ ispis_ugao($1); std::cout << std::endl; }
	| izraz LT_T izraz				{
										if($1 < $3)
											std::cout << "True" << std::endl;
										else
											std::cout << "False" << std::endl;
									}
	| izraz GT_T izraz				{
										if($1 > $3)
											std::cout << "True" << std::endl;
										else
											std::cout << "False" << std::endl;
									}
	| izraz LTE_T izraz				{
										if($1 <= $3)
											std::cout << "True" << std::endl;
										else
											std::cout << "False" << std::endl;
									}
	| izraz GTE_T izraz				{
										if($1 >= $3)
											std::cout << "True" << std::endl;
										else
											std::cout << "False" << std::endl;
									}
	| izraz EQ_T izraz				{
										if($1 == $3)
											std::cout << "True" << std::endl;
										else
											std::cout << "False" << std::endl;
									}
	| izraz NEQ_T izraz				{
										if($1 != $3)
											std::cout << "True" << std::endl;
										else
											std::cout << "False" << std::endl;
									}
	| IDL_T '=' lista				{
										auto it = liste.find(*$1);
										if(it != liste.end())
											delete it->second;
										liste[*$1] = new std::vector<int>(*$3);
										delete $3;
										delete $1;
									}
	| lista							{
										std::cout << "[";
										for(int i = 0; i < $1->size(); i++)
										{
											ispis_ugao((*($1))[i]);
											if(i < $1->size() - 1)
												std::cout << ",";
										}
										std::cout << "]" << std::endl;
									}
	| RAD_T	'(' izraz ')'			{
										std::cout << $3 / 180.0 / STEPEN * M_PI << "rad" << std::endl;
									}
	| RAD_T '(' lista ')'			{
										std::cout << "[";
										for(int i = 0; i < $3->size(); i++)
										{
											std::cout << (*($3))[i] / 180.0 / STEPEN * M_PI << "rad";
											if(i < $3->size() - 1)
												std::cout << ",";
										}
										std::cout << "]" << std::endl;
									}
	;
izraz: izraz '+' izraz				{ $$ = $1 + $3; }
	| izraz '-' izraz				{ $$ = $1 - $3; }
	| '(' izraz ')'					{ $$ = $2; }
	| BROJ_T '.' BROJ_T '.' BROJ_T	{
										if($3 >= 60 || $5 >= 60)
											yyerror("Neispravan izraz");
										$$ = $1 * STEPEN + $3 * MINUT + $5;
									}
	| ID_T							{
										auto it = promenljive.find(*$1);
										if(it == promenljive.end())
											yyerror("Upotreba nedefinisane promenljive");
										$$ = it->second;
										delete $1;
									}
	| BROJ_T '*' izraz				{ $$ = $1 * $3; }
	| izraz '*' BROJ_T				{ $$ = $1 * $3; }
	| izraz '/' BROJ_T				{ $$ = $1 / $3; }
	| MIN_T '(' lista ')'			{
										int min = (*$3)[0];
										for(int i = 1; i < $3->size(); i++)
										{
											if((*$3)[i] < min)
												min = (*$3)[i];
										}
										$$ = min;
										delete $3;
									}
	| MAX_T '(' lista ')'			{
										int max = (*$3)[0];
										for(int i = 1; i < $3->size(); i++)
										{
											if((*$3)[i] > max)
												max = (*$3)[i];
										}
										$$ = max;
										delete $3;
									}
	| PROSEK_T '(' lista ')'		{
										int suma = 0;
										for(int i = 0; i < $3->size(); i++)
											suma += (*$3)[i];
										$$ = suma / $3->size();
										delete $3;
									}
	| lista '[' BROJ_T ']'			{
										if($3 < 0 || $3 >= $1->size())
											yyerror("Indeks van opsega");
										$$ = (*$1)[$3];
										delete $1;
									}
	;
lista: '[' lista_el ']'				{ $$ = $2; }
	| IDL_T							{
										auto it = liste.find(*$1);
										if(it == liste.end())
											yyerror("Upotreba nedefinisane liste");
										$$ = new std::vector<int>(*(it->second));
										delete $1;
									}
	;
lista_el: lista_el ',' izraz		{
										$1->push_back($3);
										$$ = $1;
									}
	| izraz							{
										$$ = new std::vector<int>();
										$$->push_back($1);
									}
	;

%%

int main(int argc, char *argv[]) {
	if(yyparse() == 0)
		std::cout << "Program je sintaksno ispravan" << std::endl;
	else
		std::cout << "Program nije sintaksno ispravan" << std::endl;
	
	exit(EXIT_SUCCESS);
}
