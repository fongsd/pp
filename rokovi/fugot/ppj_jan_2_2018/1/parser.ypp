%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>
#include <vector>

extern int yylex();

void yyerror(std::string s) {
	std::cerr << "Sintaksna greska: " << s << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, int> promenljive_skalar;
std::map<std::string, std::vector<int> *> promenljive_lista;
%}

%union {
	std::string *ime;
	int vrednost;
	std::vector<int> *lista;
}

%token EQ_T AND_T OR_T IMPL_T EQUI_T NEG_T HEAD_T TAIL_T
%token<ime> ID_T IDL_T
%token<vrednost> VAL_T BROJ_T

%type<vrednost> izraz
%type<lista> lista niz_el

%left EQUI_T
%left IMPL_T
%left OR_T
%left AND_T
%right NEG_T

%%

program: program naredba '\n'
	| naredba '\n'
	;
naredba: ID_T EQ_T izraz		{
									promenljive_skalar[*$1] = $3;
									delete $1;
								}
	| IDL_T EQ_T lista			{
									promenljive_lista[*$1] = new std::vector<int>(*$3);
									delete $3;
									delete $1;
								}
	| izraz						{
									switch($1)
									{
										case 0:
											std::cout << "Undef" << std::endl;
											break;
										case 1:
											std::cout << "True" << std::endl;
											break;
										case 2:
											std::cout << "False" << std::endl;
											break;
										default:
											std::cout << $1 << std::endl;
											break;
									}
								}
	;
izraz: izraz AND_T izraz		{
									if($1 == 2 || $3 == 2)
										$$ = 2;
									else if($1 == 0 || $3 == 0)
										$$ = 0;
									else
										$$ = 1;
								}
	| izraz OR_T izraz			{
									if($1 == 1 || $3 == 1)
										$$ = 1;
									else if($1 == 0 || $3 == 0)
										$$ = 0;
									else
										$$ = 2;
								}
	| izraz IMPL_T izraz		{
									if($1 == 2)
										$$ = 1;
									else if($3 == 1)
										$$ = 1;
									else if($1 == 0)
										$$ = 0;
									else if($3 == 0)
										$$ = 0;
									else
										$$ = 2;
								}
	| izraz EQUI_T izraz		{
									if($1 == 1 && $3 == 1)
										$$ = 1;
									else if($1 == 2 && $3 == 2)
										$$ = 1;
									else if($1 == 0 || $3 == 0)
										$$ = 0;
									else
										$$ = 2;
								}
	| NEG_T izraz				{
									if($2 == 0)
										$$ = 0;
									else if($2 == 1)
										$$ = 2;
									else
										$$ = 1;
								}
	| '(' izraz ')'				{ $$ = $2; }
	| ID_T						{
									$$ = promenljive_skalar[*$1];
									delete $1;
								}
	| VAL_T						{ $$ = $1; }
	| IDL_T '[' BROJ_T ']'		{
									auto it = promenljive_lista.find(*$1);
									if(it == promenljive_lista.end())
										yyerror("Neinicijalizovana lista");
									if($3 >= it->second->size())
										yyerror("Indeks van opsega");
									$$ = (*(it->second))[$3];
									delete $1;
								}
	| HEAD_T '(' lista ')'		{ $$ = (*$3)[0]; }
	;
	lista: '[' niz_el ']'		{ $$ = $2; }
	| IDL_T						{
									auto it = promenljive_lista.find(*$1);
									if(it == promenljive_lista.end())
										yyerror("Neinicijalizovana lista");
									$$ = new std::vector<int>(*(it->second));
									delete $1;
								}
	| TAIL_T '(' lista ')'		{
									if($3->size() <= 1)
										yyerror("Nemoguce uzeti rep jednoclane liste");
									$$ = new std::vector<int>($3->begin() + 1, $3->end());
									delete $3;
								}
	;
	niz_el: niz_el ',' izraz	{
									$1->push_back($3);
									$$ = $1;
								}
	| izraz						{
									$$ = new std::vector<int>;
									$$->push_back($1);
								}
	;
%%

int main(int argc, char *argv[]) {
	if(yyparse() == 0)
		std::cout << "Program je sintaksno ispravan" << std::endl;
	else
		std::cout << "Program nije sintaksno ispravan" << std::endl;
		
	exit(EXIT_SUCCESS);
}
