%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <map>

extern int yylex();

void yyerror(std::string s) {
	std::cerr << "Sintaksna greska: " << s << std::endl;
	exit(EXIT_FAILURE);
}

std::map<std::string, std::string *> promenljive;
%}

%union {
	std::string *niska;
}

%token PRINT_T
%token<niska> ID_T CONST_T
%type<niska> izraz

%left '+' '-' '.'
%left '*' '/' 'x'
%right U_MINUS
%left '['

%%

program: program naredba ';'
	| naredba ';'
	;
naredba: ID_T '=' izraz					{
											promenljive[*$1] = $3;
											delete $1;
										}
	| PRINT_T '(' izraz ')'				{ std::cout << *$3 << std::endl; }
	;
izraz: izraz '+' izraz					{
											$$ = new std::string(std::to_string(atoi((*$1).c_str()) + atoi((*$3).c_str())));
											delete $1;
											delete $3;
										}
	| izraz '-' izraz					{
											$$ = new std::string(std::to_string(atoi((*$1).c_str()) - atoi((*$3).c_str())));
											delete $1;
											delete $3;
										}
	| izraz '*' izraz					{
											$$ = new std::string(std::to_string(atoi((*$1).c_str()) * atoi((*$3).c_str())));
											delete $1;
											delete $3;
										}
	| izraz '/' izraz					{
											$$ = new std::string(std::to_string(atoi((*$1).c_str()) / atoi((*$3).c_str())));
											delete $1;
											delete $3;
										}
	| izraz '.' izraz					{
											$$ = new std::string(*$1 + *$3);
											delete $1;
											delete $3;
										}
	| izraz 'x' izraz					{
											std::string pom = "";
											int stepen = atoi((*$3).c_str());
											for(int i = 0; i < stepen; i++)
												pom += *$1;
											$$ = new std::string(pom);
											delete $1;
											delete $3;
										}
	| izraz '[' izraz ',' izraz ']'		{
											int m = atoi((*$3).c_str());
											int n = atoi((*$5).c_str());
											if(m < 0 || n >= $1->length() || m > n)
												yyerror("Indeksi van domasaja");
											$$ = new std::string($1->substr(m, n));
											delete $1;
											delete $3;
											delete $5;
										}
	| '-' izraz %prec U_MINUS			{
											$$ = new std::string(std::to_string(-atoi((*$2).c_str())));
											delete $2;
										}
	| '(' izraz ')'						{ $$ = $2; }
	| ID_T								{
											auto it = promenljive.find(*$1);
											if(it == promenljive.end())
												yyerror("Upotreba nedeklarisane promenljive");
											$$ = new std::string(*(it->second));
											delete $1;
										}
	| CONST_T							{ $$ = $1; }
	;

%%

int main(int argc, char *argv[]) {
	if(yyparse() == 0)
		std::cout << "Program je sintaksno ispravan" << std::endl;
	else
		std::cout << "Program nije sintaksno ispravan" << std::endl;
	
	exit(EXIT_SUCCESS);
}
