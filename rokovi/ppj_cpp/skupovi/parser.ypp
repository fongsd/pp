%{

#include <iostream>
#include <cstdlib>
#include <string>
#include <map>

using namespace std;

#include "skup.hpp"

extern int yylex();

void yyerror(string s) {

	cerr<<s<<endl;
	exit(EXIT_FAILURE);
}

map<string, Skup*> promenljive;
Skup* uniSet = NULL;

void obrisi(){

	for (auto it = promenljive.begin(); it != promenljive.end(); it++)
		delete it->second;
		
	if (uniSet != NULL)
		delete uniSet;
}

%}

%left UNIJA_T
%left PRESEK_T RAZLIKA_T
%right '~'

%union{
	int x;
	string* ime;
	Skup* s;
}

%token PRINT_T CHECK_T CARD_T UNI_SET_T PRESEK_T UNIJA_T RAZLIKA_T TT
%token<ime> ID
%token<x> BROJ

%type<s> lista skup izraz

%start program

%%
program: naredba ';' program	{}
	|							{}
	;
naredba: ID '=' izraz 				{	
										auto it = promenljive.find(*$1);
										if (it != promenljive.end())
											delete it->second;
										
										promenljive[*$1] = $3;
									}
	| ID '=' BROJ TT BROJ			{	
										auto it = promenljive.find(*$1);
										if (it != promenljive.end())
											delete it->second;
										
										promenljive[*$1] = new Skup($3, $5);
									}
	| PRINT_T izraz					{	
										cout << *$2 << endl;
										delete $2;
									}
	| CHECK_T BROJ ':' izraz		{	
										if ($4->find($2))
											cout<<"True"<<endl;
										else 
											cout<<"False"<<endl;
										delete $4;
									}
	| CHECK_T izraz '<' izraz		{	
										if ($4->subset(*$2))
											cout<<"True"<<endl;
										else 
											cout<<"False"<<endl;
										delete $4;
									}
	| CARD_T izraz					{	
										cout<<($2->card())<<endl;
									}
	| UNI_SET_T '=' BROJ TT BROJ	{	
										if (uniSet != NULL)
											delete uniSet;
										
										uniSet = new Skup($3, $5);
									}
	;
izraz: izraz UNIJA_T izraz	{	
								$$ = *$1 + *$3;
								delete $1;
								delete $3;
							}
	| izraz PRESEK_T izraz	{	
								$$ = *$1 * *$3;
								delete $1;
								delete $3;
							}
	| izraz RAZLIKA_T izraz	{	
								$$ = *$1 - *$3;
								delete $1;
								delete $3;
							}
	| '~' izraz				{	
								if (uniSet == NULL)
									yyerror("Nije definisan univerzalni set");
									
								$$ = uniSet->complement(*$2);
								delete $2;
							}
	| '(' izraz ')'			{	
								$$ = $2;
							}
	| ID					{	
								auto it = promenljive.find(*$1);
								if (it == promenljive.end())
									yyerror("Pormneljiva nije definisana");
									
								$$ = new Skup(*(it->second));
								delete $1;
							}
	| skup					{	$$ = $1; }
	;
skup: '{' lista '}'			{	$$ = $2;}
	;
lista: lista ',' BROJ		{	$1->insert($3); $$ = $1;}
	| BROJ					{	$$ = new Skup(); $$->insert($1);}
	;

%%

int main(int argc, char** argv) {
	
	if (yyparse() != 0)
		yyerror("Previse tokena na ulazu");
		
	cout<<"Sve ok"<<endl;
	
	obrisi();

	exit(EXIT_SUCCESS);
}
