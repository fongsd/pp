%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <map>
#include <algorithm>


#define YYDEBUG 1

extern int yylex();

void yyerror(std::string s){
    std::cerr << s << std::endl;
    exit(EXIT_FAILURE);
}

void stampaj(std::vector<int> *v){
    std::sort(v->begin(), v->end());
    std::cout << "{";
    for(auto it = v->begin(); it != v->end(); it++)
    {
        if(it != v->begin())
            std::cout << ", ";
        std::cout << *it;
    }
    std::cout << "}" << std::endl;
}

std::map<std::string, std::vector<int>*> vars;
std::string* US_ime;
int flag = 0;

int jestePodskup(std::vector<int> *a, std::vector<int>*b) {
   for(auto x: *a){
      if(std::find(b->begin(),b->end(),x)==b->end())
          return 0;
   }
   return 1;
}

    
%}

%union {
    int vrednost;
    std::string *ime;
    std::vector<int> *el;
}

%token PRINT_T UNIJA_T PRESEK_T RAZLIKA_T INTERVAL_T CARD_T USID_T  CHECK_T
%token<ime> ID_T
%token<vrednost> BROJ_T

%type<el> elementi izraz

%left '<'
%left UNIJA_T PRESEK_T RAZLIKA_T
%right '~'

%start program

%%
program:    program naredba ';'                             {}
            | naredba ';'                                   {}
            ;
            
naredba:    ID_T '=' izraz                                  {
                                                                auto it = vars.find(*$1);
                                                                if(it != vars.end())
                                                                {
                                                                    //delete it->second;
                                                                    yyerror("Skup je vec definisan!");
                                                                }
                                                                vars[*$1] = $3;
                                                                delete $1;
                                                                //delete $3;
                                                            }
            | USID_T ID_T '=' izraz                         {
                                                                auto it = vars.find(*$2);
                                                                if(it != vars.end())
                                                                {
                                                                    yyerror("Skup je vec definisan!");
                                                                }
                                                                //proveriti da li je UniversalSet vec definisan
                                                                
                                                                if(flag){
                                                                   yyerror("UniversalSet je vec definisan!"); 
                                                                }
                                                                //definisemo US
                                                                vars[*$2] = $4;
                                                                flag = true;
                                                                US_ime = new std::string(*$2);
                                                                delete $2;
                                                                //delete $4;
                                                            }
            | PRINT_T izraz                                 {
                                                                stampaj($2);
                                                                delete $2;
                                                            }
            | CARD_T izraz                                  {
                                                                std::cout << $2->size() << std::endl;
                                                                delete $2;
                                                            }
            | CHECK_T BROJ_T ':' izraz                      {
                                                                auto it = std::find($4->begin(), $4->end(), $2);
                                                                if(it == $4->end())
                                                                    std::cout << "False" << std::endl;
                                                                else
                                                                    std::cout << "True" << std::endl;
                                                                delete $4;
                                                            }
            | CHECK_T izraz '<' izraz                       {
                                                                int res = jestePodskup($2, $4);
                                                                if(res == 1)
                                                                    std::cout << "True" << std::endl;
                                                                else
                                                                    std::cout << "False" << std::endl;
                                                                delete $2;
                                                                delete $4;
                                                            }
            ;   

        
izraz:      '{' elementi '}'                                {$$ = $2;}
            | BROJ_T INTERVAL_T BROJ_T                      {
                                                                if($3 <= $1)
                                                                    yyerror("b >= a");
                                                                $$ = new std::vector<int>($3-$1+1);
                                                                for(int i = 0; i < $$->size(); i++)
                                                                {
                                                                    (*$$)[i] = $1++;
                                                                }
                                                            }
            | izraz UNIJA_T izraz                           {
                                                                $$ = new std::vector<int>($1->size() + $3->size());
                                                                
                                                                std::sort($1->begin(), $1->end());
                                                                std::sort($3->begin(), $3->end());
                                                                
                                                                auto it = std::set_union($1->begin(), $1->end(), $3->begin(), $3->end(), $$->begin());
                                                                $$->resize(it-($$->begin()));
                                                                delete $1;
                                                                delete $3;
                                                            }
            | izraz PRESEK_T izraz                          {
                                                                $$ = new std::vector<int>($1->size() + $3->size());
                                                                
                                                                std::sort($1->begin(), $1->end());
                                                                std::sort($3->begin(), $3->end());
                                                                
                                                                auto it = std::set_intersection($1->begin(), $1->end(), $3->begin(), $3->end(), $$->begin());
                                                                $$->resize(it-($$->begin()));
                                                                delete $1;
                                                                delete $3;
                                                            }
            | izraz RAZLIKA_T izraz                         {
                                                                $$ = new std::vector<int>($1->size() + $3->size());
                                                                
                                                                std::sort($1->begin(), $1->end());
                                                                std::sort($3->begin(), $3->end());
                                                                
                                                                auto it = std::set_difference($1->begin(), $1->end(), $3->begin(), $3->end(), $$->begin());
                                                                $$->resize(it-($$->begin()));
                                                                delete $1;
                                                                delete $3;
                                                            }
            | '~' izraz                                     {
                                                                //proveriti da li postoji US
                                                                
                                                                if(!flag){
                                                                    yyerror("UniversalSet ne postoji.");
                                                                }
                                                                //ako postoji izvsiti komplementiranje
                                                                auto us_it = vars.find(*US_ime);
                                                                std::sort(us_it->second->begin(), us_it->second->end());
                                                                std::sort($2->begin(), $2->end());
                                                                
                                                                $$ = new std::vector<int>(us_it->second->size() + $2->size());
                                                                
                                                                auto it = std::set_difference(us_it->second->begin(), us_it->second->end(), $2->begin(), $2->end(), $$->begin());
                                                               
                                                                $$->resize(it - $$->begin());
                                                                delete $2;
                                                            }                                                
            | ID_T                                          {
                                                                auto it = vars.find(*$1);
                                                                if(it == vars.end())
                                                                {
                                                                    yyerror("Skup nije definisan!");
                                                                }
                                                                $$ = new std::vector<int>( *(it->second));
                                                                delete $1;
                                                            }
                                                            
            ;
elementi:   elementi ',' BROJ_T                             {
                                                                $1->push_back($3);
                                                                $$ = $1;
                                                            }
            | BROJ_T                                        {
                                                                $$ = new std::vector<int>(1, $1);
                                                            }
            ;
%%

int main()
{
    //yydebug = 1;

    if(yyparse() == 0)
    {
        std::cout << "Uspesno parsiranje" << std::endl;
    }
    else
    {
        std::cout << "Greska u parsiranju" << std::endl;
    }
    delete US_ime;
    //dealociraj();
    
    return 0;
}
