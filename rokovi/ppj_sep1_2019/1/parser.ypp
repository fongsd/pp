%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <map>
#include <algorithm>
#include <cctype>

#define YYDEBUG 1

extern int yylex();
    
void yyerror(std::string s){
    std::cerr << s << std::endl;
    exit(EXIT_FAILURE);
}

std::map<std::string, std::string*> vars;
%}

%union {
    std::string *ime;
    int indeks;
}

%token NISKA_T OBRNI_T SORTIRAJ_T VELIKA_T MALA_T PODNISKA_T STAMPAJ_T DUZINA_T EQ_T EQPLUS_T

%token<ime> ID_T CONST_T
%token<indeks> BROJ_T

%left ','
%right '=' EQPLUS_T
%left EQ_T
%left '>' '<'
%left '+'
%left '*'
%left '[' ']'

%type<ime> izraz

%start program

%%
program:    program naredba ';'
            | naredba ';'
            ;
naredba:     NISKA_T lista                                      {}
            | ID_T '=' izraz                                    {                                                                    
                                                                    vars[*$1] = new std::string(*$3);
                                                                    delete $1;
                                                                    delete $3;
                                                                }
            | ID_T EQPLUS_T izraz                               {
                                                                    vars[*$1] = new std::string(*vars[*$1] + *$3);
                                                                    delete $1;
                                                                    delete $3;
                                                                }
            | DUZINA_T '(' izraz ')'                            {
                                                                    std::cout << $3->size() << std::endl;
                                                                    delete $3;
                                                                }
            | STAMPAJ_T '(' izraz ')'                           {
                                                                    std::cout << *$3 << std::endl;
                                                                    delete $3;
                                                                }
            | ID_T OBRNI_T                                      {
                                                                    auto it = vars.find(*$1);
                                                                    if(it == vars.end())
                                                                        yyerror("Promenljiva nije definisana");
                                                                    std::reverse(vars[*$1]->begin(), vars[*$1]->end());
                                                                    delete $1;
                                                                }
            | ID_T SORTIRAJ_T                                   {
                                                                    auto it = vars.find(*$1);
                                                                    if(it == vars.end())
                                                                        yyerror("Promenljiva nije definisana");
                                                                    //da li praviti kopiju pa raditi sa kopijom ??
                                                                    
                                                                    std::sort(vars[*$1]->begin(), vars[*$1]->end());
                                                                    delete $1;
                                                                }
            | ID_T MALA_T                                       {
                                                                    auto it = vars.find(*$1);
                                                                    if(it == vars.end())
                                                                        yyerror("Promenljiva nije definisana");
                                                                    std::transform(vars[*$1]->begin(), vars[*$1]->end(),vars[*$1]->begin(), [](unsigned char c){return std::tolower(c);});
                                                                    delete $1;
                                                                }
            | ID_T VELIKA_T                                     {
                                                                    auto it = vars.find(*$1);
                                                                    if(it == vars.end())
                                                                        yyerror("Promenljiva nije definisana");
                                                                    std::transform(vars[*$1]->begin(), vars[*$1]->end(),vars[*$1]->begin(), [](unsigned char c){return std::toupper(c);});
                                                                    delete $1;
                                                                }
            | ID_T PODNISKA_T '(' izraz ')'                     {
                                                                    auto it = vars.find(*$1);
                                                                    if(it == vars.end())
                                                                        yyerror("Promenljiva nije definisana");
                                                                    if( (it->second)->find(*$4) == std::string::npos)
                                                                        std::cout << "False" << std::endl;
                                                                    else
                                                                        std::cout << "True" << std::endl;
                                                                    delete $4;
                                                                    delete $1;
                                                                }
            | izraz '>' izraz                                   {}
            | izraz EQ_T izraz                                  {}
            | izraz '<' izraz                                   {}
            ;
izraz:      izraz '+' izraz                                     {
                                                                    $$ = new std::string( *$1 + *$3);
                                                                    delete $1;
                                                                    delete $3;
                                                                }
            | izraz '*' BROJ_T                                  {
                                                                    std::string tmp = "";
                                                                    for(int i = 1; i <= $3; i++)
                                                                        tmp += *$1;
                                                                    $$ = new std::string(tmp);
                                                                    delete $1;
                                                                }
            | '(' izraz ')'                                     {
                                                                    $$ = $2;
                                                                    delete $2;
                                                                }
            | izraz '[' BROJ_T ',' BROJ_T ']'                   {
                                                                    $$ = new std::string(*$1, $3, $5);
                                                                    delete $1;
                                                                }
            | CONST_T                                           {
                                                                    $$ = new std::string(*$1);
                                                                    delete $1;
                                                                }
            | ID_T                                              {
                                                                    auto it = vars.find(*$1);
                                                                    if(it == vars.end())
                                                                        yyerror("Promenljiva nije definisana");
                                                                    $$ = new std::string( *(it->second) );
                                                                    
                                                                    delete $1;
                                                                }
            ;
lista:      lista ',' init                                      {
                                                                   
                                                                }
            | init                                              {
                                                                    
                                                                }
            ;
init:       ID_T '=' izraz                                    {
                                                                    auto it = vars.find(*$1);
                                                                    if(it != vars.end())
                                                                        yyerror("Promenljiva vec definisana");
                                                                    
                                                                    vars[*$1] = new std::string(*$3);
                                                                    delete $1;
                                                                    delete $3;
                                                                }
            | ID_T                                              {
                                                                    auto it = vars.find(*$1);
                                                                    if(it != vars.end())
                                                                        yyerror("Promenljiva vec definisana");
                                                                        
                                                                    vars[*$1] = new std::string();
                                                                    delete $1;
                                                                }
           
%%

int main(int argc, char **argv){
    //yydebug = 1;
    if(yyparse() == 0)
        std::cout << "Sve ok" << std::endl;
    else
        std::cout << "Greska pri parsiranju" << std::endl;
}
