Starting parse
Entering state 0
Reading a token: Next token is token LID_T ()
Shifting token LID_T ()
Entering state 2
Reading a token: Next token is token DODELA_T ()
Shifting token DODELA_T ()
Entering state 16
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 10
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 20
Reducing stack by rule 13 (line 34):
   $1 = token ID_T ()
-> $$ = nterm izraz ()
Stack now 0 2 16 10
Entering state 24
Reading a token: Next token is token ',' ()
Reducing stack by rule 23 (line 46):
   $1 = nterm izraz ()
-> $$ = nterm elementi ()
Stack now 0 2 16 10
Entering state 25
Next token is token ',' ()
Shifting token ',' ()
Entering state 41
Reading a token: Next token is token ID_T ()
Shifting token ID_T ()
Entering state 20
Reducing stack by rule 13 (line 34):
   $1 = token ID_T ()
-> $$ = nterm izraz ()
Stack now 0 2 16 10 25 41
Entering state 50
Reading a token: Next token is token ',' ()
Reducing stack by rule 22 (line 45):
   $1 = nterm elementi ()
   $2 = token ',' ()
   $3 = nterm izraz ()
-> $$ = nterm elementi ()
Stack now 0 2 16 10
Entering state 25
Next token is token ',' ()
Shifting token ',' ()
Entering state 41
Reading a token: Next token is token TRUE_T ()
Shifting token TRUE_T ()
Entering state 5
Reducing stack by rule 15 (line 36):
   $1 = token TRUE_T ()
-> $$ = nterm izraz ()
Stack now 0 2 16 10 25 41
Entering state 50
Reading a token: Next token is token ']' ()
Reducing stack by rule 22 (line 45):
   $1 = nterm elementi ()
   $2 = token ',' ()
   $3 = nterm izraz ()
-> $$ = nterm elementi ()
Stack now 0 2 16 10
Entering state 25
Next token is token ']' ()
Shifting token ']' ()
Entering state 40
Reducing stack by rule 18 (line 40):
   $1 = token '[' ()
   $2 = nterm elementi ()
   $3 = token ']' ()
-> $$ = nterm lista ()
Stack now 0 2 16
Entering state 35
Reducing stack by rule 4 (line 24):
   $1 = token LID_T ()
   $2 = token DODELA_T ()
   $3 = nterm lista ()
-> $$ = nterm naredba ()
Stack now 0
Entering state 12
Reading a token: Next token is token '\n' ()
Shifting token '\n' ()
Entering state 28
Reducing stack by rule 2 (line 21):
   $1 = nterm naredba ()
   $2 = token '\n' ()
-> $$ = nterm program ()
Stack now 0
Entering state 11
Reading a token: Next token is token HEAD_T ()
Shifting token HEAD_T ()
Entering state 3
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 18
Reading a token: Next token is token LID_T ()
Shifting token LID_T ()
Entering state 34
Reducing stack by rule 19 (line 41):
   $1 = token LID_T ()
-> $$ = nterm lista ()
Stack now 0 11 3 18
Entering state 37
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 48
Reducing stack by rule 20 (line 42):
   $1 = token HEAD_T ()
   $2 = token '(' ()
   $3 = nterm lista ()
   $4 = token ')' ()
-> $$ = nterm lista ()
Stack now 0 11
Entering state 14
Reducing stack by rule 6 (line 26):
   $1 = nterm lista ()
-> $$ = nterm naredba ()
Stack now 0 11
Entering state 27
Reading a token: Next token is token '\n' ()
Shifting token '\n' ()
Entering state 42
Reducing stack by rule 1 (line 20):
   $1 = nterm program ()
   $2 = nterm naredba ()
   $3 = token '\n' ()
-> $$ = nterm program ()
Stack now 0
Entering state 11
Reading a token: Next token is token TAIL_T ()
Shifting token TAIL_T ()
Entering state 4
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 19
Reading a token: Next token is token LID_T ()
Shifting token LID_T ()
Entering state 34
Reducing stack by rule 19 (line 41):
   $1 = token LID_T ()
-> $$ = nterm lista ()
Stack now 0 11 4 19
Entering state 38
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 49
Reducing stack by rule 21 (line 43):
   $1 = token TAIL_T ()
   $2 = token '(' ()
   $3 = nterm lista ()
   $4 = token ')' ()
-> $$ = nterm lista ()
Stack now 0 11
Entering state 14
Reducing stack by rule 6 (line 26):
   $1 = nterm lista ()
-> $$ = nterm naredba ()
Stack now 0 11
Entering state 27
Reading a token: Next token is token '\n' ()
Shifting token '\n' ()
Entering state 42
Reducing stack by rule 1 (line 20):
   $1 = nterm program ()
   $2 = nterm naredba ()
   $3 = token '\n' ()
-> $$ = nterm program ()
Stack now 0
Entering state 11
Reading a token: Next token is token HEAD_T ()
Shifting token HEAD_T ()
Entering state 3
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 18
Reading a token: Next token is token TAIL_T ()
Shifting token TAIL_T ()
Entering state 4
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 19
Reading a token: Next token is token LID_T ()
Shifting token LID_T ()
Entering state 34
Reducing stack by rule 19 (line 41):
   $1 = token LID_T ()
-> $$ = nterm lista ()
Stack now 0 11 3 18 4 19
Entering state 38
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 49
Reducing stack by rule 21 (line 43):
   $1 = token TAIL_T ()
   $2 = token '(' ()
   $3 = nterm lista ()
   $4 = token ')' ()
-> $$ = nterm lista ()
Stack now 0 11 3 18
Entering state 37
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 48
Reducing stack by rule 20 (line 42):
   $1 = token HEAD_T ()
   $2 = token '(' ()
   $3 = nterm lista ()
   $4 = token ')' ()
-> $$ = nterm lista ()
Stack now 0 11
Entering state 14
Reducing stack by rule 6 (line 26):
   $1 = nterm lista ()
-> $$ = nterm naredba ()
Stack now 0 11
Entering state 27
Reading a token: Next token is token '\n' ()
Shifting token '\n' ()
Entering state 42
Reducing stack by rule 1 (line 20):
   $1 = nterm program ()
   $2 = nterm naredba ()
   $3 = token '\n' ()
-> $$ = nterm program ()
Stack now 0
Entering state 11
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 26
Stack now 0 11 26
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
Uspesno parsiranje
