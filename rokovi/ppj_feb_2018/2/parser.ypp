%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <map>
#include <algorithm>

#define YYDEBUG 1

extern int yylex();

void yyerror(std::string s){
    std::cerr << s << std::endl;
    exit(EXIT_FAILURE);
}   

std::map<std::string, int> vars;
std::map<std::string, std::vector<int>*> lists;

int neg(int x);

int logicko_i(int x, int y);

int logicko_ili(int x, int y);

int impl(int x, int y);

int ekv(int x, int y);

%}

%union {
    int vrednost;
    std::string *ime;
    std::vector<int> *el;
}

%token DODELA_T HEAD_T TAIL_T EKV_T KONJ_T DISJ_T IMPL_T
%token<ime> ID_T LID_T
%token<vrednost> CONST_T BROJ_T

%type<vrednost> izraz
%type<el> elementi lista

%left DISJ_T KONJ_T IMPL_T EKV_T
%right '!'

%%
program:    program naredba '\n'                {}
            | naredba '\n'                      {}
            ;       
naredba:    ID_T DODELA_T izraz                 {
                                                    vars[*$1] = $3;
                                                    delete $1;
                                                }
            | LID_T DODELA_T lista              {
                                                    lists[*$1] = new std::vector<int>(*$3);
                                                    delete $3;
                                                    delete $1;
                                                }
            | izraz                             {
                                                    if($1 == 0)
                                                        std::cout << "Undef" << std::endl;
                                                    else if($1 == 1)
                                                        std::cout << "True" << std::endl;
                                                    else if($1 == -1)
                                                        std::cout << "False" << std::endl;
                                                    else
                                                        yyerror("Nemoguce");
                                                }
            ;
izraz:      izraz EKV_T izraz                   {
                                                    $$ = ekv($1, $3);
                                                }
            | izraz KONJ_T izraz                {
                                                    $$ = logicko_i($1, $3);
                                                }
            | izraz DISJ_T izraz                {
                                                    $$ = logicko_ili($1, $3);
                                                }
            | izraz IMPL_T izraz                {
                                                    $$ = impl($1, $3);
                                                }
            | '!' izraz                         {
                                                    $$ = neg($2);
                                                }
            | '(' izraz ')'                     {
                                                    $$ = $2;
                                                }   
            | ID_T                              {
                                                    auto it = vars.find(*$1);
                                                    if(it == vars.end())
                                                        yyerror("Promenljiva nije definisana");
                                                    $$ = it->second;
                                                    delete $1;
                                                }
            | LID_T '[' BROJ_T ']'              {
                                                    auto it = lists.find(*$1);
                                                    if(it == lists.end())
                                                        yyerror("Lista nije definisana");
                                                    
                                                    if($3 >= (int)it->second->size())
                                                        yyerror("Indeks van granica");
                                                    $$ = (*(it->second))[$3];
                                                    delete $1;
                                                }
            | CONST_T                           {
                                                    $$ = $1;
                                                }
            | HEAD_T '(' lista ')'              {
                                                    $$ = (*$3)[0];
                                                }
            ;   
lista:      '[' elementi ']'                    { $$ = $2;}
            | LID_T                             {
                                                    auto it = lists.find(*$1);
                                                    if(it == lists.end())
                                                        yyerror("Lista nije definisana");
                                                    $$ = new std::vector<int>(*(it->second));
                                                    delete $1;
                                                }
            | TAIL_T '(' lista ')'              {
                                                    //provera ako je lista sadrzi samo jedan element???
                                                    $$ = new std::vector<int>($3->begin() + 1, $3->end());
                                                    delete $3;
                                                }
            ;   
elementi:   elementi ',' izraz                  {
                                                    $1->push_back($3);
                                                    $$ = $1;
                                                }
            | izraz                             {
                                                    $$ = new std::vector<int>(1, $1);
                                                }
            ;
%%

int main(int argc, char **argv){
    //yydebug = 1;
    
    if(yyparse() == 0){
        std::cout << "Uspesno parsiranje" << std::endl;
    }else{
        std::cout << "Greska pri parsiranju" << std::endl;
    }
}

int neg (int x){
    return -x;
}

int logicko_i (int x, int y){
    return std::min(x, y);
}

int logicko_ili (int x, int y){
    return std::max(x,y);
}

int impl (int x, int y){
    return logicko_ili(neg(x), y);
}

int ekv (int x, int y){
    int tmp1 = impl(x,y);
    int tmp2 = impl(y, x);
    
    return logicko_i(tmp1, tmp2);
}
