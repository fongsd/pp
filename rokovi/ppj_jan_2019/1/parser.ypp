%{
#include <iostream>
#include <cstdlib>
#include <string>    
#include <map>
#include <vector>

#define YYDEBUG 1

extern int yylex();

void yyerror(std::string s) {
    std::cerr << s << std::endl;
    exit(EXIT_FAILURE);
}

std::map<std::string, int> vars;
std::map<std::string, std::vector<int>*> lists;

void print_number(int broj, int osnova)
{
    if(osnova == 10)
        printf("%d", broj);
    else if(osnova == 8)
        printf("%o", broj);
    else if(osnova == 16)
        printf("%x", broj);
    else
        yyerror("Nepodrzana osnova");
    std::cout << std::endl;
}

void print_list(std::vector<int> *v)
{
    for(int x: *v)
        std::cout << x << " ";
    std::cout << std::endl;
}


%}

%union {
    int broj;
    std::string* ime;
    std::vector<int>* el;
}

%left '|'
%left '^'
%left '&'
%left SHL_T SHR_T
%left '+' '-'
%left '*' '/'
%right '~' UMINUS

%token INT_T PRINT_T LIST_T EQL_T
%token<broj> BROJ
%token<ime> ID_T
%token<ime> LID_T

%type<broj> izraz
%type<el> lista elementi

%start program

%%
program:    program naredba ';'             {}
            | naredba ';'                   {}
    ;
naredba:    INT_T ID_T                      {
                                                auto it = vars.find(*$2);
                                                if(it != vars.end()){
                                                    yyerror("Promenljiva je vec deklarisana.");
                                                }
                                                
                                                vars[*$2] = 0;
                                                delete $2;
                                            }
            | INT_T ID_T '=' izraz          {   
                                                auto it = vars.find(*$2);
                                                if(it != vars.end()){
                                                    yyerror("Promenljiva je vec deklarisana.");
                                                }
                                                
                                                vars[*$2] = $4;
                                                delete $2;
                                            }
            | ID_T '=' izraz                {
                                                auto it = vars.find(*$1);
                                                if(it == vars.end()){
                                                    yyerror("Promenljiva nije deklarisana.");
                                                }
                                                
                                                vars[*$1] = $3;
                                                delete $1;
                                            }
            | izraz EQL_T izraz             {
                                                if($1 == $3)
                                                    std::cout << "TACNO" << std::endl;
                                                else
                                                    std::cout << "NETACNO" << std::endl;
                                            }
            | PRINT_T '(' izraz ',' BROJ ')' {print_number($3, $5);}
            | PRINT_T '(' izraz ')'          {print_number($3, 10);}
            | PRINT_T '(' lista ')'          {print_list($3);}
            | LIST_T LID_T '=' lista        {
                                                auto it = lists.find(*$2);
                                                if(it != lists.end())
                                                    yyerror("Lista vec postoji.");
                                                lists[*$2] = $4;
                                                delete $2;
                                            }
            ;   
izraz:      izraz '+' izraz                 {$$ = $1 + $3;}
            | izraz '-' izraz               {$$ = $1 - $3;}
            | izraz '*' izraz               {$$ = $1 * $3;}
            | izraz '/' izraz               {$$ = $1 / $3;}
            | izraz '&' izraz               {$$ = $1 & $3;}
            | izraz '|' izraz               {$$ = $1 | $3;}
            | izraz '^' izraz               {$$ = $1 ^ $3;}
            | '-' izraz %prec UMINUS        {$$ = -$2;}
            | '~' izraz                     {$$ = ~$2;}
            | izraz SHL_T izraz             {
                                                if($3 <= 0)
                                                    yyerror("Drugi operand mora biti veci od 0!");
                                                $$ = $1 << $3;
                                            }
            | izraz SHR_T izraz             {
                                                if($3 <= 0)
                                                    yyerror("Drugi operand mora biti veci od 0!");
                                                $$ = $1 >> $3;
                                            }
            | '(' izraz ')'                 {$$ = $2;}
            | BROJ                          {$$ = $1;}
            | ID_T                          {
                                                auto it = vars.find(*$1);
                                                if(it == vars.end())
                                                    yyerror("Promenljiva nije deklarisana");
                                                $$ = vars[*$1];
                                                delete $1;
                                            }
            | LID_T '[' BROJ ']'            {
                                                auto it = lists.find(*$1);
                                                if(it == lists.end())
                                                    yyerror("Lista nije deklarisana");
                                                
                                                if($3 >= lists[*$1]->size())
                                                    yyerror("Indeks van granica");
                                                $$ = (*lists[*$1])[$3];
                                                delete $1;
                                            }
            ;
            
lista:      '[' elementi ']'                { $$ = $2;}
            | LID_T                         {
                                                auto it = lists.find(*$1);
                                                if(it == lists.end())
                                                    yyerror("Lista nije deklarisana");
                                                $$ = new std::vector<int>(*lists[*$1]);
                                                delete $1;
                                            }
            ;
elementi:   elementi ',' izraz              {
                                                //$1->push_back($3);
                                                //$$ = $1;
                                                $1->push_back($3);
                                                $$ = $1;
                                            }
            | izraz                         {
                                                $$ = new std::vector<int>(1, $1);
                                            }
            ;                               
%%

int main()
{
    //yydebug = 1;

    if(yyparse() == 0){
        std::cout << "Uspesno parsiranje!" << std::endl;
    }else {
        std::cout << "Greska u parsiranju!" << std::endl;
    }
    
    return 0;
}
