%{

#include <bits/stdc++.h>

using namespace std;

extern int yylex();

void yyerror(string s){
    cerr << "Sintaksna greska: " << s << endl;
    exit(EXIT_FAILURE);
}

map<string, vector<int>*> vars;

void assert_var(string s){
    auto it = vars.find(s);
    if(it == vars.end()){
        yyerror("Reference to undefined variable");
    }
}
void nassert_var(string s){
    auto it = vars.find(s);
    if(it != vars.end()){
        yyerror("Declaring already existing variable");
    }
}

void massert(bool a){
    if(!a){
        yyerror("Assert failed");
    }
}

vector<int>* vec(int a){
    return new vector<int>(1, a);
}

vector<int>* vec(vector<int>& a){
    auto n = new vector<int>(a);
    return n;
}

%}

%union{
    int v;
    string* id;
    vector<int>* niz;
}

%type<niz> lista izraz

%token PRINT_T INT_T LIST_T ASSIGN_T SHL_T SHR_T EQ_T 
%token<id> ID
%token<v> BROJ

%left SHL_T
%left '+' '-'
%left '*' '/'
%left '['
%right UMINUS


%start program

%%

program:    naredba '\n' program            {}
            | naredba '\n'                  {}
            ;
naredba:    INT_T ID                        {nassert_var(*$2); vars[*$2] = vec(0); delete $2;}
            | INT_T ID '=' izraz            {nassert_var(*$2); vars[*$2] = $4; delete $2;}
            | LIST_T ID                     {nassert_var(*$2); vars[*$2] = vec(0); delete $2;}
            | LIST_T ID '=' '[' lista ']'   {nassert_var(*$2); vars[*$2] = $5; delete $2;}
            | PRINT_T '(' izraz ',' BROJ ')' {
                                              if($3->size() > 1) {      
                                                switch($5){
                                                        case 8:
                                                            for(auto it = $3->begin(); it != $3->end(); it++)
                                                            {
                                                               printf("0%o ", *it);
                                                            }
                                                            printf("\n");
                                                            delete $3;
                                                            break;
                                                        case 16:                                                        
                                                            for(auto it = $3->begin(); it != $3->end(); it++)
                                                            {
                                                                printf("0x%x ", *it);
                                                            }
                                                            printf("\n");
                                                            delete $3;
                                                            break;
                                                        default:
                                                            yyerror("Neispravna osnova!");
                                                            delete $3;
                                               }
                                            }else {
                                               switch($5){
                                                        case 8:
                                                            printf("0%o\n", (*$3)[0]);
                                                            delete $3;
                                                            break;
                                                        case 16:                   
                                                            printf("0x%x\n", (*$3)[0]);
                                                            delete $3;
                                                            break;
                                                        default:
                                                            delete $3;
                                                            yyerror("Neispravna osnova!");
                                            } 
                                        }
                                    }
            | PRINT_T '(' izraz ')'         {
                                                for(auto el : *$3){
                                                    cout << el << " ";
                                                }
                                                cout << endl;
                                            }
            | ID '=' izraz                  {
                                                //assert_var(*$1);
                                                auto it = vars.find(*$1);
                                                if(it == vars.end())
                                                {
                                                    yyerror("Declaring already existing variable");
                                                }
                                                //brisemo stari sadrzaj
                                                delete it->second;
                                                
                                                vars[*$1] = $3;
                                                delete $1;
                                                
                                            }
            | ID '=' '[' lista ']'          {vars[*$1] = $4;}
            |                               {}
            ;
izraz:      izraz '+' izraz                 {
                                                massert($1->size() == 1);
                                                massert($3->size() == 1);
                                                $$ = vec((*$1)[0] + (*$3)[0]);
                                                delete $1;
                                                delete $3;
                                            }
            | izraz '-' izraz               {
                                                massert($1->size() == 1);
                                                massert($3->size() == 1);
                                                $$ = vec((*$1)[0] - (*$3)[0]);
                                                delete $1;
                                                delete $3;
                                            }
            | izraz '*' izraz               {
                                                massert($1->size() == 1);
                                                massert($3->size() == 1);
                                                $$ = vec((*$1)[0] * (*$3)[0]);
                                                delete $1;
                                                delete $3;
                                            }
            | izraz '/' izraz               {
                                                massert($1->size() == 1);
                                                massert($3->size() == 1);
                                                $$ = vec((*$1)[0] / (*$3)[0]);
                                                delete $1;
                                                delete $3;
                                            }
            | izraz SHL_T izraz             {
                                                massert($1->size() == 1);
                                                massert($3->size() == 1);
                                                $$ = vec( (*$1)[0] << (*$3)[0] );
                                                delete $1;
                                                delete $3;
                                            }
            | '(' izraz ')'                 {$$ = $2;}
            | '-' izraz %prec UMINUS        {$$ = vec(-(*$2)[0]); delete $2;}
            | ID '[' izraz ']'              {$$ = vec((*vars[*$1])[(*$3)[0]]); delete $1; delete $3;}
            | ID                            {
                                                assert_var(*$1);
                                                $$ = vec((*vars[*$1]));
                                                delete $1;
                                            }
            | BROJ                          {$$ = vec($1);}
            ;
lista:      lista ',' izraz                 {$1->push_back((*$3)[0]); $$ = $1; delete $3;}
            | izraz                         {$$ = vec((*$1)[0]); delete $1;}
            ;

%%

int main(){
    if(yyparse() == 0){
        cout << "Sve ok" << endl;
    } else {
        cout << "Greska u parsiranju" << endl;
    }
}
